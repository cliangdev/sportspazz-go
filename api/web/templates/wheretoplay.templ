package templates

import (
    "mime/multipart"

    "github.com/sportspazz/service/poi"
    "net/url"
    "fmt"
)

templ WhereToPlayPage() {
    <div class="container mx-auto p-4 flex flex-col space-y-4 h-screen">
        <div class="container container mx-auto p-4 flex flex-col space-y-2 h-screen">
            <form hx-get="/wheretoplay/search"
                    hx-trigger="submit"
                    hx-target="#search-result"
                    hx-indicator="#spinner"
                    class="bg-white p-4 rounded-lg shadow-md flex space-x-4 mb-0">
                <div class="flex-1">
                    <select id="sport" name="sport" required
                        class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                        <option value="">Select a sport</option>
                        <option value="Football">Football</option>
                        <option value="Basketball">Basketball</option>
                        <option value="Baseball">Baseball</option>
                        <option value="Soccer">Soccer</option>
                        <option value="Tennis">Tennis</option>
                        <option value="Hockey">Hockey</option>
                    </select>
                </div>
                <div class="flex-1">
                    <input type="text" id="city" name="city" placeholder="Enter city" required
                        class="block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"/>
                    <input type="hidden" id="cityPlaceId" name="cityPlaceId" />
                </div>
                <button type="submit"
                    class="relative bg-indigo-600 text-white px-4 py-2 rounded-md shadow hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2">
                    <span class="text-white">Search</span>
                </button>

            </form>
            <div class="flex justify-end mt-1">
                <a href="/wheretoplay/new" class="text-sm text-indigo-600 hover:text-indigo-800">Create a new place</a>
            </div>
            <div class="container mx-auto p-6">
                <div id="search-result" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4"></div>
                <center>
                    <div id="spinner" class="htmx-indicator m-8">
                        <svg xmlns="http://www.w3.org/2000/svg" width="2em" height="2em" viewBox="0 0 24 24"><g><circle cx="12" cy="3" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate0" attributeName="r" begin="0;svgSpinners12DotsScaleRotate2.end-0.5s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="16.5" cy="4.21" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate1" attributeName="r" begin="svgSpinners12DotsScaleRotate0.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="7.5" cy="4.21" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate2" attributeName="r" begin="svgSpinners12DotsScaleRotate4.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="19.79" cy="7.5" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate3" attributeName="r" begin="svgSpinners12DotsScaleRotate1.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="4.21" cy="7.5" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate4" attributeName="r" begin="svgSpinners12DotsScaleRotate6.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="21" cy="12" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate5" attributeName="r" begin="svgSpinners12DotsScaleRotate3.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="3" cy="12" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate6" attributeName="r" begin="svgSpinners12DotsScaleRotate8.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="19.79" cy="16.5" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate7" attributeName="r" begin="svgSpinners12DotsScaleRotate5.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="4.21" cy="16.5" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate8" attributeName="r" begin="svgSpinners12DotsScaleRotatea.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="16.5" cy="19.79" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotate9" attributeName="r" begin="svgSpinners12DotsScaleRotate7.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="7.5" cy="19.79" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotatea" attributeName="r" begin="svgSpinners12DotsScaleRotateb.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><circle cx="12" cy="21" r="1" fill="currentColor"><animate id="svgSpinners12DotsScaleRotateb" attributeName="r" begin="svgSpinners12DotsScaleRotate9.begin+0.1s" calcMode="spline" dur="0.6s" keySplines=".27,.42,.37,.99;.53,0,.61,.73" values="1;2;1"/></circle><animateTransform attributeName="transform" dur="6s" repeatCount="indefinite" type="rotate" values="360 12 12;0 12 12"/></g></svg>
                    </div>
                </center>
            </div>
        </div>
    </div>
    @cityAutoComplete()
}

templ SearchResult(pois poi.Pois, sport, cityPlaceId string, pageSize int) {
    for idx, poi := range pois.Results {
        @PoiCardComponent(poi, idx == (len(pois.Results) - 1), pois.Cursor, sport, cityPlaceId, pageSize)
    }
}

templ PoiCardComponent(poi poi.Poi, lastPoi bool, cursor string, sport, cityPlaceId string, pageSize int) {
    <div class="poi-item bg-white p-4 rounded-lg shadow">
        <a href={ templ.SafeURL("/wheretoplay/" + poi.SportType + "/" + poi.ID) } class="block">
            <div class="flex items-center space-x-4">
                <div class="place-info w-full max-w-md">
                    if poi.ThumbnailUrl != "" {
                        <img src={ poi.ThumbnailUrl }
                            alt="Place Picture" loading="lazy" class="w-full h-32 object-cover rounded-lg" />
                    } else {
                        <img src="/static/assets/where_to_play_default_thumbnail.jpg"
                            alt="Place Picture" loading="lazy" class="w-full h-32 object-cover rounded-lg" />
                    }
                    <p class="place-name text-lg font-semibold truncate" title={ poi.Name }>{ poi.Name }</p>
                    <p class="sport-type text-sm font-semibold text-gray-500">{ poi.SportType }</p>
                    <p>
                        <a href={ templ.SafeURL("https://www.google.com/maps/search/?api=1&query=" + url.QueryEscape(poi.Address)) }
                            target="_blank"
                            class="relative text-xs text-blue-400 hover:text-blue-800 group">
                            { poi.Address }
                        </a>
                    </p>
                    if poi.Website != "" {
                    <p>
                            <a href={ templ.SafeURL(poi.Website) }
                                target="_blank"
                                class="relative text-xs text-blue-400 hover:text-blue-800 group">
                                { poi.Website }
                            </a>
                        </p> 
                    }
                    <p class="place-description text-sm text-gray-600 max-h-36 overflow-hidden">{ poi.Description }</p>
                </div>
            </div>
            if lastPoi && cursor != "" {
                <div hx-trigger="revealed" 
                    hx-get={ fmt.Sprintf("/wheretoplay/search?sport=%s&cityPlaceId=%s&pageSize=%d&cursor=%s", sport, cityPlaceId, pageSize, cursor)} 
                    hx-swap="beforeend"
                    hx-indicator="#spinner"
                    hx-target="#search-result"></div>
            }
        </a>
    </div>
}

templ SearchError(message string) {
    if message != "" {
        <div class="max-w-md mx-auto">
            <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md mb-4 text-center">
                <span>{ message}</span>
            </div>
        </div>
    }
}

templ CreateNewPlace() {
    <div class="bg-white p-8 rounded shadow-md w-full max-w-lg">
        <h1 class="text-2xl font-bold mb-6 text-center">Create a New Place</h1>
        <form id="create-place-form"
            hx-post="/wheretoplay/new"
            hx-trigger="submit"
            hx-target="#submit-response"
            enctype="multipart/form-data">
            <div class="mb-4">
                <input type="text" id="name" name="name" placeholder="Name"
                    class="border border-gray-300 rounded p-2 w-full" required minlength="3" maxlength="100"/>
            </div>
            <div class="mb-4">
                <textarea id="description" name="description" placeholder="Description"
                    class="border border-gray-300 rounded p-2 w-full" required minlength="50" maxlength="8000"></textarea>
            </div>
            <div class="mb-4">
                <input type="text" id="address" name="address" placeholder="Address"
                    class="border border-gray-300 rounded p-2 w-full" required/>
                <input type="hidden" id="cityPlaceId" name="cityPlaceId" />
            </div>
            <div class="mb-4">
                <input type="text" id="website" name="website" placeholder="Website"
                    class="border border-gray-300 rounded p-2 w-full" required/>
            </div>
            <div class="mb-4">
                <select id="sport" name="sport" class="border border-gray-300 rounded p-2 w-full" required>
                    <option value="">Select a sport</option>
                    <option value="Soccer">Soccer</option>
                    <option value="Basketball">Basketball</option>
                    <option value="Baseball">Baseball</option>
                    <option value="Tennis">Tennis</option>
                    <option value="Golf">Golf</option>
                    <option value="Running">Running</option>
                    <option value="Cycling">Cycling</option>
                    <option value="Swimming">Swimming</option>
                    <option value="Volleyball">Volleyball</option>
                    <option value="Cricket">Cricket</option>
                </select>
            </div>
            <div class="mb-4">
                <label for="thumbnail" class="block text-gray-700 font-medium mb-2">Thumbnail</label>
                <input type="file" id="thumbnail" name="thumbnail" class="border border-gray-300 rounded p-2 w-full"/>
            </div>
            <div id="submit-response" class="mt-2 h-10" />
            <button type="submit"
                class="w-full bg-blue-500 text-white rounded-md px-4 py-2 mt-4 transition duration-300 hover:bg-blue-600">
                Submit?
            </button>
        </form>
    </div>
    @addressAutoComplete()
}

templ addressAutoComplete() {
    <script>
        function initAutocomplete() {
            const addressInput = document.getElementById('address');
            const placeIdInput = document.getElementById('cityPlaceId');
            const autocomplete = new google.maps.places.Autocomplete(addressInput, {
                types: ['(cities)'],
            });

            autocomplete.addListener('place_changed', () => {
                const place = autocomplete.getPlace();
                if (!place.place_id) {
                    console.log("No place_id for the selected place.");
                    return;
                }

                placeIdInput.value = place.place_id;
            });
        }

        google.maps.event.addDomListener(window, 'load', initAutocomplete);
    </script>
}

templ cityAutoComplete() {
    <script>
        function initAutocomplete() {
            const cityInput = document.getElementById('city');
            const placeIdInput = document.getElementById('cityPlaceId');
            const autocomplete = new google.maps.places.Autocomplete(cityInput, {
                types: ['(cities)'],
            });

            autocomplete.addListener('place_changed', () => {
                const place = autocomplete.getPlace();
                if (!place.place_id) {
                    console.log("No place_id for the selected place.");
                    return;
                }

                placeIdInput.value = place.place_id;
            });
        }
        window.addEventListener('load', initAutocomplete);
    </script>
}

type CreateNewPlaceFormInput struct {
    Name                string
    Description         string
    Address             string
    CityId              string
    Website             string
    Sport               string
    Thumbnail           multipart.File
    ThumbnailFilename   string
}
