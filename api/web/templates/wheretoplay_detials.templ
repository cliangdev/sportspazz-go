package templates

import (
    "github.com/sportspazz/api/web/types"
    "github.com/sportspazz/configs"
    "fmt"
)

templ PlaceDetais(details types.Result) {
    <div class="container mx-auto p-4 flex flex-col space-y-4 h-screen max-w-[421px]">
        <div class="bg-white shadow-lg rounded-lg p-6 max-w-md w-full">
            <h1 class="text-2xl font-bold">{ details.Name }</h1>
            <div class="my-4">
                @renderRating(details.Rating)
            </div>
            <div class="space-y-2 mb-2">
                <p class="text-base text-gray-600">
                    <a href={ googleMapUrl(details.FormattedAddress) } target="_blank" class="text-blue-500 hover:underline">
                        { details.FormattedAddress }
                    </a>
                </p>
                if details.FormattedAddress != "" {
                    <p class="text-base text-gray-600">
                        <a href="tel:+02093744000" class="text-blue-500 hover:underline">
                            { details.FormattedPhoneNumber }
                        </a>
                    </p>
                }
                if details.Website != "" {
                    <p class="text-base text-gray-600">
                        <a href="http://google.com/" target="_blank" class="text-blue-500 hover:underline">
                            { details.Website }
                        </a>
                    </p>
                }
            </div>
            if details.OpeningHours.WeekdayText != nil {
                <div class="my-4">
                    <h2 class="text-xl font-semibold">Opening Hours</h2>
                    <ul class="list-disc list-inside text-sm">
                        for _, dayText := range details.OpeningHours.WeekdayText {
                            <li>{ dayText }</li>
                        }
                    </ul>
                </div>
            }

            <div class="my-2">
                <h2 class="text-xl font-semibold">Photos</h2>
                <div class="swiper">
                    <div class="swiper-wrapper">
                        for _, photo := range details.Photos {
                            <div class="swiper-slide">
                                <div class="w-full h-80 flex items-center justify-center">
                                    <img src={ photoUrl(photo) } alt="Photo" class="object-cover h-full w-full" />
                                </div>
                            </div>
                        }
                    </div>
                    <div class="swiper-button-prev"></div>
                    <div class="swiper-button-next"></div>
                </div>
            </div>
        </div>
    </div>
    
    <link href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" rel="stylesheet"/>
    <script src="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.js"></script>
    <script>
        var swiper = new Swiper(".swiper", {
        loop: true,
        autoHeight: true,
        navigation: {
            nextEl: ".swiper-button-next",
            prevEl: ".swiper-button-prev",
        },
        });
    </script>
}

templ renderRating(rating int) {
    <div class="flex items-center">
        for i := 1; i <= rating; i++ {
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-yellow-500 fill-current" viewBox="0 0 24 24">
                <path d="M12 2l2.4 7.4H22l-6 4.6 2.4 7.4-6.4-4.6-6.4 4.6 2.4-7.4-6-4.6h7.6z"/>
            </svg>
        }
        for i := rating + 1; i <= 5; i++ {
            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-300 fill-current" viewBox="0 0 24 24">
                <path d="M12 2l2.4 7.4H22l-6 4.6 2.4 7.4-6.4-4.6-6.4 4.6 2.4-7.4-6-4.6h7.6z"/>
            </svg>
        }
    </div>
}

func googleMapUrl(address string) templ.SafeURL {
    return templ.SafeURL("https://www.google.com/maps/search/?api=1&query=" + address)
}

func photoUrl(photo types.Photo) string{
    return fmt.Sprintf("https://maps.googleapis.com/maps/api/place/photo?maxwidth=400&photoreference=%s&key=%s", photo.PhotoReference, configs.Envs.GoogleMapApiKey)
}
