name: Deploy to staging

on:
  push:
    branches:
      - master

env:
  GAR_REGION: us-central1
  VM_ZONE: us-central1-a
  CONTAINER_NAME: sportspazz-app

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Login to GAR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GAR_REGION }}-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_SA_KEY }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ env.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sportspazz/sportspazz:latest -f docker/Dockerfile .
          docker push ${{ env.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sportspazz/sportspazz:latest
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
          GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-key.json

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-publish
    if: success()

    steps:
      - name: Authenticate GCP
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Google Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Copy Config Files to GCE VM
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' > service_account.json
          echo '${{ secrets.SERVER_CRT }}' > server.crt
          echo '${{ secrets.SERVER_KEY }}' > server.key
          gcloud compute scp service_account.json ${{ secrets.VM_INSTANCE_NAME }}:/home/$USER/service_account.json --zone=${{ env.VM_ZONE }}
          gcloud compute scp server.crt ${{ secrets.VM_INSTANCE_NAME }}:/home/$USER/server.crt --zone=${{ env.VM_ZONE }}
          gcloud compute scp server.key ${{ secrets.VM_INSTANCE_NAME }}:/home/$USER/server.key --zone=${{ env.VM_ZONE }}
      - name: Deploy to GCE VM
        run: | 
          gcloud compute ssh ${{ secrets.VM_INSTANCE_NAME }} --zone=${{ env.VM_ZONE }} --command "
            pwd

            # GAR authentication
            cat service_account.json | docker login -u _json_key --password-stdin https://${{ env.GAR_REGION }}-docker.pkg.dev

            # Pull the Docker image
            docker pull ${{ env.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sportspazz/sportspazz:latest

            # Stop and remove any existing container
            docker stop ${{ env.CONTAINER_NAME }} || true
            docker rm ${{ env.CONTAINER_NAME }} || true

            # Run the Docker container
            docker run --name ${{ env.CONTAINER_NAME }} \
              --network sportspazz-network \
              -p 443:8080 \
              -e DB_HOST=${{ secrets.DB_HOST}} \
              -e DB_PORT=5432 \
              -e DB_USER=${{ secrets.DB_USER}} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD}} \
              -e DB_NAME=sports_app \
              -e DB_MIGRATION_DIR=/app/db/migrations \
              -e GOOGLE_MAP_API_KEY=${{ secrets.GOOGLE_MAP_API_KEY }} \
              -e CLOUD_STORAGE_BUCKET=${{ vars.CLOUD_STORAGE_BUCKET }} \
              -e GCP_SERVICE_ACCOUNT_API_KEY=/app/configs/service_account.json \
              -e CERT_FILE=/app/configs/server.crt \
              -e KEY_FILE=/app/configs/server.key \
              -v /home/runner/service_account.json:/app/configs/service_account.json \
              -v /home/runner/server.crt:/app/configs/server.crt \
              -v /home/runner/server.key:/app/configs/server.key \
              -d ${{ env.GAR_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/sportspazz/sportspazz:latest

            # Verify the Docker container
            docker ps
          "
